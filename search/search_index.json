{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OneGPIO Scratch 3 Extensions For Arduino, Raspbery Pi And ESP-8266 Installation And Usage Control your favorite physical computing device using Scratch 3. Windows, Mac, and Linux , including Raspberry Pi are supported. Launch Scratch 3 via the internet or locally on your computer. Control your Raspberry Pi either locally or from your PC. Control one of the micro-controllers or all three! Last Updated: 22 October 2019 Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Welcome"},{"location":"acks/","text":"A Simple Expression Of Thanks This project would not have been possible without the help of Hiro Osaki and Edson Sidnei Sobreira, and indirectly, Seiji Matsushita. Hiro wrote an excellent article, \"How to Develop Your Own Block for Scratch 3.0\" , that demystified the Scratch 3 Extension Specification. In addition, he unselfishly provided some personal guidance. Edson provided some early testing and guidance that resulted in simplifying the user's interaction with the OneGPIO extensions. Also, he pointed me to the work of Seiji Matsushita, who implemented language translation. The translation code I implemented is based on Seiji's work. Edson curates the HackEduca Web site. Language Translation Acknowledgements Brazilian Portuguese and Portuguese: Edson Sidnei Sobreira French: Florian Becard Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Thank You"},{"location":"acks/#a-simple-expression-of-thanks","text":"This project would not have been possible without the help of Hiro Osaki and Edson Sidnei Sobreira, and indirectly, Seiji Matsushita. Hiro wrote an excellent article, \"How to Develop Your Own Block for Scratch 3.0\" , that demystified the Scratch 3 Extension Specification. In addition, he unselfishly provided some personal guidance. Edson provided some early testing and guidance that resulted in simplifying the user's interaction with the OneGPIO extensions. Also, he pointed me to the work of Seiji Matsushita, who implemented language translation. The translation code I implemented is based on Seiji's work. Edson curates the HackEduca Web site.","title":"A Simple Expression Of Thanks"},{"location":"acks/#language-translation-acknowledgements","text":"Brazilian Portuguese and Portuguese: Edson Sidnei Sobreira French: Florian Becard Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Language Translation Acknowledgements"},{"location":"ard_blocks/","text":"The Arduino Uno Blocks The blocks consist of a set of command blocks that are rectangular in shape and reporter blocks rounded in shape. Command Blocks Write Digital This block allows you to select a pin and set its output to either a one or zero. It has two parameters. The first is a drop-down list of valid PINs. The second parameter is the output value. It also is a drop-down list and contains the values zero and one. Write PWM This block allows you to select a pin and set its PWM output to be a value between 0 and 100%. It has two parameters. The first is a drop-down list of valid PINs. The second parameter allows you to fill in a PWM value. If you use a PWM value of less than zero, it will be set to 0 internally. If you set the value to greater than 100, it will be set to 100. Tone If you connect a Piezo type buzzer to a pin, this block will generate a tone on the pin for the frequency and duration specified. It contains three parameters. The first is a drop-down list of valid PINs. The second allows you to specify the frequency of the tone in Herz. The third parameter specifies the tone duration in milliseconds. If a value greater than 5000 is entered, the value will be set to 5000 internally, limiting the maximum playing time to 5 seconds. Write Servo This block allows you to control the angle of a servo motor. It contains two parameters. The first is a drop-down list of valid PINs. The second specifies the angle in degrees. The value is limited to be between 0 and 180. Reporter Blocks Read Digital This block allows you to read the current state of a digital input pin. It has one parameter, a drop-down list containing all the valid PINs. It reports a value of zero or one. Read Analog This block allows you to read the current state of an analog input pin. It has one parameter, a drop-down list containing all the valid Pins. It reports a value between 0 and 1023. Read Sonar This block allows you to connect an HC-SR04 type device. It has two parameters, both containing a drop-down list of valid PINs. The first parameter allows you to select a trigger pin and the second an echo pin. It returns the measured distance in centimeters. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Arduino"},{"location":"ard_blocks/#the-arduino-uno-blocks","text":"The blocks consist of a set of command blocks that are rectangular in shape and reporter blocks rounded in shape.","title":"The Arduino Uno Blocks"},{"location":"ard_blocks/#command-blocks","text":"","title":"Command Blocks"},{"location":"ard_blocks/#write-digital","text":"This block allows you to select a pin and set its output to either a one or zero. It has two parameters. The first is a drop-down list of valid PINs. The second parameter is the output value. It also is a drop-down list and contains the values zero and one.","title":"Write Digital"},{"location":"ard_blocks/#write-pwm","text":"This block allows you to select a pin and set its PWM output to be a value between 0 and 100%. It has two parameters. The first is a drop-down list of valid PINs. The second parameter allows you to fill in a PWM value. If you use a PWM value of less than zero, it will be set to 0 internally. If you set the value to greater than 100, it will be set to 100.","title":"Write PWM"},{"location":"ard_blocks/#tone","text":"If you connect a Piezo type buzzer to a pin, this block will generate a tone on the pin for the frequency and duration specified. It contains three parameters. The first is a drop-down list of valid PINs. The second allows you to specify the frequency of the tone in Herz. The third parameter specifies the tone duration in milliseconds. If a value greater than 5000 is entered, the value will be set to 5000 internally, limiting the maximum playing time to 5 seconds.","title":"Tone"},{"location":"ard_blocks/#write-servo","text":"This block allows you to control the angle of a servo motor. It contains two parameters. The first is a drop-down list of valid PINs. The second specifies the angle in degrees. The value is limited to be between 0 and 180.","title":"Write Servo"},{"location":"ard_blocks/#reporter-blocks","text":"","title":"Reporter Blocks"},{"location":"ard_blocks/#read-digital","text":"This block allows you to read the current state of a digital input pin. It has one parameter, a drop-down list containing all the valid PINs. It reports a value of zero or one.","title":"Read Digital"},{"location":"ard_blocks/#read-analog","text":"This block allows you to read the current state of an analog input pin. It has one parameter, a drop-down list containing all the valid Pins. It reports a value between 0 and 1023.","title":"Read Analog"},{"location":"ard_blocks/#read-sonar","text":"This block allows you to connect an HC-SR04 type device. It has two parameters, both containing a drop-down list of valid PINs. The first parameter allows you to select a trigger pin and the second an echo pin. It returns the measured distance in centimeters. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Read Sonar"},{"location":"arduino/","text":"FirmataExpress Installation Instructions The Scratch 3 OneGPIO extension for the Arduino Uno takes advantage of pymata-express , to control and monitor your Arduino. The s3-extend installation, executed previously, installed pymata-express. Pymata-express requires a specialized Firmata sketch, called FirmataExpress to be installed on your Arduino Uno. The following steps explain how to install FirmataExpress on your Arduino. Step 1: Arduino IDE Installation If you have not already installed the Arduino IDE on your computer, go to the Arduino download page and select a distribution for your operating system. Step 2: Install FirmataPlus Into The IDE After installation, open the Arduino IDE and select Tools/Manage Libraries. When the Libary Manager appears, enter FirmataExpress in the search box, and click install. Step 3: Install The Ultrasonic Library Into The IDE FirmataExpress also requires that the ultrasonic library by Erick Sim\u00f5es for operation. Once again, using the Arduino Library Manager and search for ultrasonic and find the version by Erick Simoes. Click on the Tools/Manage Libraries and select Ultrasonic and then click Install.** Step 4: Go Into The Tools Menus and Verify The Board Type and Port Step 5: Compile And Upload FirmataPlus Into The Arduino Select File/Examples and from the drop-down list select FirmataExpress. Click on the upload button to compile and upload FirmataExpress to the Arduino. The Arduino is now ready for use. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Arduino"},{"location":"arduino/#firmataexpress-installation-instructions","text":"The Scratch 3 OneGPIO extension for the Arduino Uno takes advantage of pymata-express , to control and monitor your Arduino. The s3-extend installation, executed previously, installed pymata-express. Pymata-express requires a specialized Firmata sketch, called FirmataExpress to be installed on your Arduino Uno. The following steps explain how to install FirmataExpress on your Arduino.","title":"FirmataExpress Installation Instructions"},{"location":"arduino/#step-1-arduino-ide-installation","text":"If you have not already installed the Arduino IDE on your computer, go to the Arduino download page and select a distribution for your operating system.","title":"Step 1: Arduino IDE Installation"},{"location":"arduino/#step-2-install-firmataplus-into-the-ide","text":"After installation, open the Arduino IDE and select Tools/Manage Libraries. When the Libary Manager appears, enter FirmataExpress in the search box, and click install.","title":"Step 2: Install FirmataPlus Into The IDE"},{"location":"arduino/#step-3-install-the-ultrasonic-library-into-the-ide","text":"FirmataExpress also requires that the ultrasonic library by Erick Sim\u00f5es for operation. Once again, using the Arduino Library Manager and search for ultrasonic and find the version by Erick Simoes. Click on the Tools/Manage Libraries and select Ultrasonic and then click Install.**","title":"Step 3: Install The Ultrasonic Library Into The IDE"},{"location":"arduino/#step-4-go-into-the-tools-menus-and-verify-the-board-type-and-port","text":"","title":"Step 4: Go Into The Tools Menus and Verify The Board Type and Port"},{"location":"arduino/#step-5-compile-and-upload-firmataplus-into-the-arduino","text":"Select File/Examples and from the drop-down list select FirmataExpress. Click on the upload button to compile and upload FirmataExpress to the Arduino.","title":"Step 5: Compile And Upload FirmataPlus Into The Arduino"},{"location":"arduino/#the-arduino-is-now-ready-for-use","text":"Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"The Arduino is now ready for use."},{"location":"browsers/","text":"Recommended Browser The recommended browser for Scratch3 OneGPIO extensions is Google Chrome . If You Wish To Use Firefox You may use FireFox, but you will need to configure it to do so. The OneGPIO extensions use a WebSocket connection between the browser and the WebSocket Gateway that is part of each extension server. By default, Firefox does not allow connections to a WebSocket server. To enable Firefox to allow WebSocket connections, open the following URL about:config You should see a warning screen similar to that below. Click on the I accept the risk! button. Scroll down until you find the network.websocket.allowInsecureFromHTTPS entry and double click false to change its state to true. Close FireFox and reopen. Scratch 3 OneGPIO should now function properly. Trouble Shooting If, after loading an extension, it is not behaving as expected, while the browser is open, press the F12 key on your keyboard to expose the browser console. If you see any errors reported, and are still not sure how to solve the issue, create an issue against the s3-extend distribution pasting any error output into the issue comment. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"A Word About Browser Compatibility"},{"location":"browsers/#recommended-browser","text":"The recommended browser for Scratch3 OneGPIO extensions is Google Chrome .","title":"Recommended Browser"},{"location":"browsers/#if-you-wish-to-use-firefox","text":"You may use FireFox, but you will need to configure it to do so. The OneGPIO extensions use a WebSocket connection between the browser and the WebSocket Gateway that is part of each extension server. By default, Firefox does not allow connections to a WebSocket server. To enable Firefox to allow WebSocket connections, open the following URL about:config You should see a warning screen similar to that below. Click on the I accept the risk! button. Scroll down until you find the network.websocket.allowInsecureFromHTTPS entry and double click false to change its state to true. Close FireFox and reopen. Scratch 3 OneGPIO should now function properly.","title":"If You Wish To Use Firefox"},{"location":"browsers/#trouble-shooting","text":"If, after loading an extension, it is not behaving as expected, while the browser is open, press the F12 key on your keyboard to expose the browser console. If you see any errors reported, and are still not sure how to solve the issue, create an issue against the s3-extend distribution pasting any error output into the issue comment. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Trouble Shooting"},{"location":"delay/","text":"Adding A Short Delay To Loops It is often advisable to add a short delay within a loop to allow other Scratch threads to run without blocking them. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"When In Doubt, Add A Small Delay"},{"location":"delay/#adding-a-short-delay-to-loops","text":"It is often advisable to add a short delay within a loop to allow other Scratch threads to run without blocking them. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Adding A Short Delay To Loops"},{"location":"esp-8266/","text":"ESP-8266 NodeMCU Installation Instructions 1. Install MicroPython On The ESP-8266 Full instructions for loading MicroPython can be found here here. In the Deploying The Firmware section of the document, notice that there two commands to install the firmware. The latter one contains a DIO option. I needed to use this command for the get the REPL prompt. 2. Verify The REPL Prompt Follow these instructions to make sure that the installation was a success. 3. Setup WiFi Networking Follow the procedure as described here. Once you have configured the device for WiFi, it will automatically connect to your router. 4. Installing The ampy Tool We need to install some files on to the ESP-8266 to communicate with the Scratch extension. We will be using the ampy tool for file manipulation on the ESP-8266. To install ampy, follow the instructions at this link. There is a warning about not using the examples provided with the ampy tutorial. You can safely ignore the warning notice since we only need to install the tool. 5. Getting The MicroPython Files To Install On To The ESP-8266 The files we need to install are main.py and esp_8266_min.py. The esp_8266_min.py file is a file with all unnecessary white space removed. Here is a fully white-spaced enabled version of the source code. The file needed to be \"minified\" so that it would fit on the ESP-8266 NodeMCU. To get the files, go to the s3-extend web page, and click on the green Clone or download button in the upper right of the page. A .zip file is downloaded to your computer. Unzip the file, and a directory called s3-extend-master is created and populated with the files we need. Here is the directory tree for s3-extend-master: s3-extend-master \u251c\u2500\u2500 esp_8266_micropython \u2502 \u251c\u2500\u2500 esp_8266_max.py \u2502 \u251c\u2500\u2500 esp_8266_min.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 main.py \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 pypi_desc.md \u251c\u2500\u2500 README.md \u251c\u2500\u2500 s3_extend \u2502 \u251c\u2500\u2500 gateways \u2502 \u2502 \u251c\u2500\u2500 arduino_gateway.py \u2502 \u2502 \u251c\u2500\u2500 esp8266_gateway.py \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 rpi_gateway.py \u2502 \u2502 \u251c\u2500\u2500 servo.py \u2502 \u2502 \u251c\u2500\u2500 sonar.py \u2502 \u2502 \u251c\u2500\u2500 stepper.py \u2502 \u2502 \u2514\u2500\u2500 ws_gateway.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 s3a.py \u2502 \u251c\u2500\u2500 s3e.py \u2502 \u2514\u2500\u2500 s3r.py \u2514\u2500\u2500 setup.py Both files are located in the esp_8266_micropython directory. 6. Using ampy To Install The Files Open a terminal window, and go into the esp_8266_micropython directory. To upload main.py to the ESP-8266, type in the following command: ampy --port /dev/ttyUSB0 put main.py NOTE: You may need to change the port to match your system. Instead of /dev/ttyUSB0, you may need to use something like COM5. Use the same com port you used when testing the REPL. Now upload esp_8266_min.py: ampy --port /dev/ttyUSB0 put esp_8266_min.py 7. Powering Up When you power up the board, you should see the red LED on the ESP-8266 NodeMCU flash a few times and then stay on. The LED will be extinguished when the Scratch 3 extension successfully connects to the board. See the Ready, Set, Go section of this document. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"ESP-8266"},{"location":"esp-8266/#esp-8266-nodemcu-installation-instructions","text":"","title":"ESP-8266 NodeMCU Installation Instructions"},{"location":"esp-8266/#1-install-micropython-on-the-esp-8266","text":"Full instructions for loading MicroPython can be found here here. In the Deploying The Firmware section of the document, notice that there two commands to install the firmware. The latter one contains a DIO option. I needed to use this command for the get the REPL prompt.","title":"1. Install MicroPython On The ESP-8266"},{"location":"esp-8266/#2-verify-the-repl-prompt","text":"Follow these instructions to make sure that the installation was a success.","title":"2. Verify The REPL Prompt"},{"location":"esp-8266/#3-setup-wifi-networking","text":"Follow the procedure as described here. Once you have configured the device for WiFi, it will automatically connect to your router.","title":"3. Setup WiFi Networking"},{"location":"esp-8266/#4-installing-the-ampy-tool","text":"We need to install some files on to the ESP-8266 to communicate with the Scratch extension. We will be using the ampy tool for file manipulation on the ESP-8266. To install ampy, follow the instructions at this link. There is a warning about not using the examples provided with the ampy tutorial. You can safely ignore the warning notice since we only need to install the tool.","title":"4. Installing The ampy Tool"},{"location":"esp-8266/#5-getting-the-micropython-files-to-install-on-to-the-esp-8266","text":"The files we need to install are main.py and esp_8266_min.py. The esp_8266_min.py file is a file with all unnecessary white space removed. Here is a fully white-spaced enabled version of the source code. The file needed to be \"minified\" so that it would fit on the ESP-8266 NodeMCU. To get the files, go to the s3-extend web page, and click on the green Clone or download button in the upper right of the page. A .zip file is downloaded to your computer. Unzip the file, and a directory called s3-extend-master is created and populated with the files we need. Here is the directory tree for s3-extend-master: s3-extend-master \u251c\u2500\u2500 esp_8266_micropython \u2502 \u251c\u2500\u2500 esp_8266_max.py \u2502 \u251c\u2500\u2500 esp_8266_min.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 main.py \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 pypi_desc.md \u251c\u2500\u2500 README.md \u251c\u2500\u2500 s3_extend \u2502 \u251c\u2500\u2500 gateways \u2502 \u2502 \u251c\u2500\u2500 arduino_gateway.py \u2502 \u2502 \u251c\u2500\u2500 esp8266_gateway.py \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 rpi_gateway.py \u2502 \u2502 \u251c\u2500\u2500 servo.py \u2502 \u2502 \u251c\u2500\u2500 sonar.py \u2502 \u2502 \u251c\u2500\u2500 stepper.py \u2502 \u2502 \u2514\u2500\u2500 ws_gateway.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 s3a.py \u2502 \u251c\u2500\u2500 s3e.py \u2502 \u2514\u2500\u2500 s3r.py \u2514\u2500\u2500 setup.py Both files are located in the esp_8266_micropython directory.","title":"5. Getting The MicroPython Files To Install On To The ESP-8266"},{"location":"esp-8266/#6-using-ampy-to-install-the-files","text":"Open a terminal window, and go into the esp_8266_micropython directory. To upload main.py to the ESP-8266, type in the following command: ampy --port /dev/ttyUSB0 put main.py NOTE: You may need to change the port to match your system. Instead of /dev/ttyUSB0, you may need to use something like COM5. Use the same com port you used when testing the REPL. Now upload esp_8266_min.py: ampy --port /dev/ttyUSB0 put esp_8266_min.py","title":"6. Using ampy To Install The Files"},{"location":"esp-8266/#7-powering-up","text":"When you power up the board, you should see the red LED on the ESP-8266 NodeMCU flash a few times and then stay on. The LED will be extinguished when the Scratch 3 extension successfully connects to the board. See the Ready, Set, Go section of this document. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"7. Powering Up"},{"location":"esp_blocks/","text":"The ESP-8266 Blocks The blocks consist of a set of command blocks that are rectangular in shape and reporter blocks rounded in shape. NOTE: If you select the ESP-8266 OneGPIO, a Warning Dialog will pop up, reminding you to enter and use the ESP-8266 IP address block. Command Blocks ESP-8266 IP Address You must enter the WiFi IP address of the ESP-8266 into this block. This block must precede any of the other ESP-8266 blocks, and should only be used once. Write Digital This block allows you to select a pin and set its output to either a one or zero. It has two parameters. The first is a drop-down list of valid PINs. The second parameter is the output value. It also is a drop-down list and contains the values zero and one. Write PWM This block allows you to select a pin and set its PWM output to be a value between 0 and 100%. It has two parameters. The first is a drop-down list of valid PINs. The second parameter allows you to fill in a PWM value. If you use a PWM value of less than zero, it will be set to 0 internally. If you set the value to greater than 100, it will be set to 100. Tone If you connect a Piezo type buzzer to a pin, this block will generate a tone on the pin for the frequency and duration specified. It contains three parameters. The first is a drop-down list of valid PINs. The second allows you to specify the frequency of the tone in Herz. The third parameter specifies the tone duration in milliseconds. If a value greater than 5000 is entered, the value will be set to 5000 internally, limiting the maximum playing time to 5 seconds. Write Servo This block allows you to control the angle of a servo motor. It contains two parameters. The first is a drop-down list of valid PINs. The second specifies the angle in degrees. The value is limited to be between 0 and 180. Reporter Blocks Read Digital This block allows you to read the current state of a digital input pin. It has one parameter, a drop-down list containing all the valid PINs. It reports a value of zero or one. Read Analog This block allows you to read the current state of an analog input pin. It has one parameter, a drop-down list containing all the valid Pins. It reports a value between 0 and 100. Read Sonar This block allows you to connect an HC-SR04 type device. It has two parameters, both containing a drop-down list of valid PINs. The first parameter allows you to select a trigger pin and the second an echo pin. It returns the measured distance in centimeters. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"ESP-8266"},{"location":"esp_blocks/#the-esp-8266-blocks","text":"The blocks consist of a set of command blocks that are rectangular in shape and reporter blocks rounded in shape. NOTE: If you select the ESP-8266 OneGPIO, a Warning Dialog will pop up, reminding you to enter and use the ESP-8266 IP address block.","title":"The ESP-8266 Blocks"},{"location":"esp_blocks/#command-blocks","text":"","title":"Command Blocks"},{"location":"esp_blocks/#esp-8266-ip-address","text":"You must enter the WiFi IP address of the ESP-8266 into this block. This block must precede any of the other ESP-8266 blocks, and should only be used once.","title":"ESP-8266 IP Address"},{"location":"esp_blocks/#write-digital","text":"This block allows you to select a pin and set its output to either a one or zero. It has two parameters. The first is a drop-down list of valid PINs. The second parameter is the output value. It also is a drop-down list and contains the values zero and one.","title":"Write Digital"},{"location":"esp_blocks/#write-pwm","text":"This block allows you to select a pin and set its PWM output to be a value between 0 and 100%. It has two parameters. The first is a drop-down list of valid PINs. The second parameter allows you to fill in a PWM value. If you use a PWM value of less than zero, it will be set to 0 internally. If you set the value to greater than 100, it will be set to 100.","title":"Write PWM"},{"location":"esp_blocks/#tone","text":"If you connect a Piezo type buzzer to a pin, this block will generate a tone on the pin for the frequency and duration specified. It contains three parameters. The first is a drop-down list of valid PINs. The second allows you to specify the frequency of the tone in Herz. The third parameter specifies the tone duration in milliseconds. If a value greater than 5000 is entered, the value will be set to 5000 internally, limiting the maximum playing time to 5 seconds.","title":"Tone"},{"location":"esp_blocks/#write-servo","text":"This block allows you to control the angle of a servo motor. It contains two parameters. The first is a drop-down list of valid PINs. The second specifies the angle in degrees. The value is limited to be between 0 and 180.","title":"Write Servo"},{"location":"esp_blocks/#reporter-blocks","text":"","title":"Reporter Blocks"},{"location":"esp_blocks/#read-digital","text":"This block allows you to read the current state of a digital input pin. It has one parameter, a drop-down list containing all the valid PINs. It reports a value of zero or one.","title":"Read Digital"},{"location":"esp_blocks/#read-analog","text":"This block allows you to read the current state of an analog input pin. It has one parameter, a drop-down list containing all the valid Pins. It reports a value between 0 and 100.","title":"Read Analog"},{"location":"esp_blocks/#read-sonar","text":"This block allows you to connect an HC-SR04 type device. It has two parameters, both containing a drop-down list of valid PINs. The first parameter allows you to select a trigger pin and the second an echo pin. It returns the measured distance in centimeters. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Read Sonar"},{"location":"ext_ard/","text":"Starting The OneGPIO Server For Arduino With power applied to your Arduino, press the Arduino's reset button. Next, open a terminal window and type: s3a This command automatically starts the Python Banyan Backplane, and both the Banyan WebSocket and Banyan Arduino Gateways. The s3a command will automatically open two other windows, one for the Arduino Gateway, and the other for the Web Socket Gateway. Visit \"A Peek Under The Hood\" for more information about the Backplane and Gateways. The Arduino Gateway window displays a Banyan information header, including the Arduino's com port. Note that it will take about four seconds for the Arduino Gateway to perform board discovery. The WebSocket Gateway displays an informational banner with the WebSocket IP address and port number in use. You may now start Scratch 3 in your Web browser, as explained in the \"Launching Scratch 3\" section of this document. If you wish to specify a COM port manually, then start s3a with a -c command-line option: s3a -c COM6 If you wish to use the pymata-express Arduino Instance Id Feature, you may do so using the -i command-line option: s3a -i 2 If you wish to turn on logging, use the -l command-line option s3a -l True Troubleshooting Only use a high-quality USB cable. Make sure that the USB cable you are using is fully plugged into your computer and the Arduino. If only one or none of the Gateway windows stay open, dismiss s3a by pressing Control-C and dismiss the terminal window. Open a new terminal and type: backplane You should see a similar output, as shown below, indicating that the backplane is running correctly. The IP address does not need to match the one shown. Next, open an additional terminal window and type: ardgw You should see a window similar to the one shown above for the Arduino Gateway when the s3a command succeeds. If you do not, make sure that you've flashed the Arduino with the FirmataExpress sketch, as explained in the \"Preparing Your Micro-Controller\" section of this document. Also, make sure that you've plugged the Arduino into a USB port before starting s3a. Next, open a third terminal window and type: wsgw You should see a window similar to the one shown above for the WebSocket Gateway when the s3a command succeeds. If there are exceptions or errors in any of the terminal windows, create an issue against the s3-extend distribution pasting any error output into the issue comment. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Arduino"},{"location":"ext_ard/#starting-the-onegpio-server-for-arduino","text":"With power applied to your Arduino, press the Arduino's reset button. Next, open a terminal window and type: s3a This command automatically starts the Python Banyan Backplane, and both the Banyan WebSocket and Banyan Arduino Gateways. The s3a command will automatically open two other windows, one for the Arduino Gateway, and the other for the Web Socket Gateway. Visit \"A Peek Under The Hood\" for more information about the Backplane and Gateways. The Arduino Gateway window displays a Banyan information header, including the Arduino's com port. Note that it will take about four seconds for the Arduino Gateway to perform board discovery. The WebSocket Gateway displays an informational banner with the WebSocket IP address and port number in use. You may now start Scratch 3 in your Web browser, as explained in the \"Launching Scratch 3\" section of this document. If you wish to specify a COM port manually, then start s3a with a -c command-line option: s3a -c COM6 If you wish to use the pymata-express Arduino Instance Id Feature, you may do so using the -i command-line option: s3a -i 2 If you wish to turn on logging, use the -l command-line option s3a -l True","title":"Starting The OneGPIO Server For Arduino"},{"location":"ext_ard/#troubleshooting","text":"Only use a high-quality USB cable. Make sure that the USB cable you are using is fully plugged into your computer and the Arduino. If only one or none of the Gateway windows stay open, dismiss s3a by pressing Control-C and dismiss the terminal window. Open a new terminal and type: backplane You should see a similar output, as shown below, indicating that the backplane is running correctly. The IP address does not need to match the one shown. Next, open an additional terminal window and type: ardgw You should see a window similar to the one shown above for the Arduino Gateway when the s3a command succeeds. If you do not, make sure that you've flashed the Arduino with the FirmataExpress sketch, as explained in the \"Preparing Your Micro-Controller\" section of this document. Also, make sure that you've plugged the Arduino into a USB port before starting s3a. Next, open a third terminal window and type: wsgw You should see a window similar to the one shown above for the WebSocket Gateway when the s3a command succeeds. If there are exceptions or errors in any of the terminal windows, create an issue against the s3-extend distribution pasting any error output into the issue comment. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Troubleshooting"},{"location":"ext_esp/","text":"Starting The OneGPIO Server For The ESP-8266 Apply power to the ESP-8266. The red LED should blink a few times and then stay continually on. Next, open a terminal window and type: s3e This command automatically starts the Python Banyan Backplane, and both the Banyan WebSocket and Banyan ESP-8266 Gateways. The s3e command will automatically open two other windows, one for the ESP-8266 Gateway, and the other for the Web Socket Gateway. Visit \"A Peek Under The Hood\" for more information about the Backplane and Gateways. The ESP-8266 Gateway window displays a Banyan information header The WebSocket Gateway displays an informational banner with the WebSocket IP address and port number in use. You may now start Scratch 3 in your Web browser, as explained in the \"Launching Scratch 3\" section of this document. Troubleshooting If only one or none of the Gateway windows stay open, dismiss s3e by pressing Control-C and dismiss the terminal window. Open a new terminal and type: backplane You should see a similar output, as shown below, indicating that the backplane is running correctly. The IP address does not need to match the one shown. Next, open an additional terminal window and type: espgw You should see a window similar to the one shown above for the ESP-8266 Gateway when the s3e command succeeds. If you do not, make sure that you've installed MicroPython on the ESP-8266 and flashed it with main.py and esp8266_min.py as explained in the \"Preparing Your Micro-Controller\" section of this document. Next, open a third terminal window and type: wsgw You should see a window similar to the one shown above for the WebSocket Gateway when the s3e command succeeds. If there are exceptions or errors in any of the terminal windows, create an issue against the s3-extend distribution pasting any error output into the issue comment. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"ESP-8266"},{"location":"ext_esp/#starting-the-onegpio-server-for-the-esp-8266","text":"Apply power to the ESP-8266. The red LED should blink a few times and then stay continually on. Next, open a terminal window and type: s3e This command automatically starts the Python Banyan Backplane, and both the Banyan WebSocket and Banyan ESP-8266 Gateways. The s3e command will automatically open two other windows, one for the ESP-8266 Gateway, and the other for the Web Socket Gateway. Visit \"A Peek Under The Hood\" for more information about the Backplane and Gateways. The ESP-8266 Gateway window displays a Banyan information header The WebSocket Gateway displays an informational banner with the WebSocket IP address and port number in use. You may now start Scratch 3 in your Web browser, as explained in the \"Launching Scratch 3\" section of this document.","title":"Starting The OneGPIO Server For The ESP-8266"},{"location":"ext_esp/#troubleshooting","text":"If only one or none of the Gateway windows stay open, dismiss s3e by pressing Control-C and dismiss the terminal window. Open a new terminal and type: backplane You should see a similar output, as shown below, indicating that the backplane is running correctly. The IP address does not need to match the one shown. Next, open an additional terminal window and type: espgw You should see a window similar to the one shown above for the ESP-8266 Gateway when the s3e command succeeds. If you do not, make sure that you've installed MicroPython on the ESP-8266 and flashed it with main.py and esp8266_min.py as explained in the \"Preparing Your Micro-Controller\" section of this document. Next, open a third terminal window and type: wsgw You should see a window similar to the one shown above for the WebSocket Gateway when the s3e command succeeds. If there are exceptions or errors in any of the terminal windows, create an issue against the s3-extend distribution pasting any error output into the issue comment. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Troubleshooting"},{"location":"ext_rpi/","text":"Starting The OneGPIO Server For Raspberry Pi Apply power to the Raspberry Pi. Next, open a terminal window and type: s3r This command automatically starts the Python Banyan Backplane, and both the Banyan WebSocket and Banyan Raspberry Pi Gateways. The s3r command will automatically open two other windows, one for the Raspberry Pi Gateway, and the other for the Web Socket Gateway. IMPORTANT NOTE: The s3r command is intended to run exclusively on a Raspberry Pi. Visit \"A Peek Under The Hood\" for more information about the Backplane and Gateways. The Raspberry Pi Gateway window displays a Banyan information header and the current version number for the pigpiod library. The WebSocket Gateway displays an informational banner with the WebSocket IP address and port number in use. You may now start Scratch 3 in your Web browser, as explained in the \"Launching Scratch 3\" section of this document. Troubleshooting If only one or none of the Gateway windows stay open, dismiss s3e by pressing Control-C and dismiss the terminal window. Open a new terminal and type: backplane You should see a similar output, as shown below, indicating that the backplane is running correctly. The IP address does not need to match the one shown. Next, open an additional terminal window and type: rpigw You should see a window similar to the one shown above for the Raspberry Pi Gateway when the s3r command succeeds. Next, open a third terminal window and type: wsgw You should see a window similar to the one shown above for the WebSocket Gateway when the s3e command succeeds. If there are exceptions or errors in any of the terminal windows, create an issue against the s3-extend distribution pasting any error output into the issue comment. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Raspberry Pi"},{"location":"ext_rpi/#starting-the-onegpio-server-for-raspberry-pi","text":"Apply power to the Raspberry Pi. Next, open a terminal window and type: s3r This command automatically starts the Python Banyan Backplane, and both the Banyan WebSocket and Banyan Raspberry Pi Gateways. The s3r command will automatically open two other windows, one for the Raspberry Pi Gateway, and the other for the Web Socket Gateway. IMPORTANT NOTE: The s3r command is intended to run exclusively on a Raspberry Pi. Visit \"A Peek Under The Hood\" for more information about the Backplane and Gateways. The Raspberry Pi Gateway window displays a Banyan information header and the current version number for the pigpiod library. The WebSocket Gateway displays an informational banner with the WebSocket IP address and port number in use. You may now start Scratch 3 in your Web browser, as explained in the \"Launching Scratch 3\" section of this document.","title":"Starting The OneGPIO Server For Raspberry Pi"},{"location":"ext_rpi/#troubleshooting","text":"If only one or none of the Gateway windows stay open, dismiss s3e by pressing Control-C and dismiss the terminal window. Open a new terminal and type: backplane You should see a similar output, as shown below, indicating that the backplane is running correctly. The IP address does not need to match the one shown. Next, open an additional terminal window and type: rpigw You should see a window similar to the one shown above for the Raspberry Pi Gateway when the s3r command succeeds. Next, open a third terminal window and type: wsgw You should see a window similar to the one shown above for the WebSocket Gateway when the s3e command succeeds. If there are exceptions or errors in any of the terminal windows, create an issue against the s3-extend distribution pasting any error output into the issue comment. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Troubleshooting"},{"location":"issues/","text":"Issues With The Scratch 3 OneGPIO Editor If you are having problems with the editor in the browser, you may file an issue here. Include a description of what you were doing that caused the error and output from the browser console. Press F12 while in the browser to get to the console. Please also include a .sb3 file for your Scratch project or a screen-shot of the blocks in the Scatch script. Issues With Any Of The OneGPIO Extension Servers If you are having problems with any of the extension servers, you may file an issue here. Include a description of what you were doing that caused the error and output from the browser console. Press F12 while in the browser to get to the console. Please also include a .sb3 file for your Scratch project or a screen-shot of the blocks in the Scatch script. Issues With This Document If you find anything that needs to be corrected or wish to request that additional information be added to it, please file an issue here. Contacting Me Via Email Please feel free to email me at: MisterYsLab@gmail.com Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Reporting Issues"},{"location":"issues/#issues-with-the-scratch-3-onegpio-editor","text":"If you are having problems with the editor in the browser, you may file an issue here. Include a description of what you were doing that caused the error and output from the browser console. Press F12 while in the browser to get to the console. Please also include a .sb3 file for your Scratch project or a screen-shot of the blocks in the Scatch script.","title":"Issues With The Scratch 3 OneGPIO Editor"},{"location":"issues/#issues-with-any-of-the-onegpio-extension-servers","text":"If you are having problems with any of the extension servers, you may file an issue here. Include a description of what you were doing that caused the error and output from the browser console. Press F12 while in the browser to get to the console. Please also include a .sb3 file for your Scratch project or a screen-shot of the blocks in the Scatch script.","title":"Issues With Any Of The OneGPIO Extension Servers"},{"location":"issues/#issues-with-this-document","text":"If you find anything that needs to be corrected or wish to request that additional information be added to it, please file an issue here.","title":"Issues With This Document"},{"location":"issues/#contacting-me-via-email","text":"Please feel free to email me at: MisterYsLab@gmail.com Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Contacting Me Via Email"},{"location":"multi/","text":"Controlling Or Monitoring One Board With Another As the screen-shot above shows, it is possible to run multiple OneGPIO extensions at the same time and have the boards interact with each other. This Scratch script will control the LEDs connected to an ESP-8266 and Raspberry Pi by monitoring the state of a switch on an Arduino. This script was run in a browser on a PC in off-line mode, allowing the Raspberry Pi to be controlled remotely. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Running Multiple OneGPIO Extensions Simultaneously"},{"location":"multi/#controlling-or-monitoring-one-board-with-another","text":"As the screen-shot above shows, it is possible to run multiple OneGPIO extensions at the same time and have the boards interact with each other. This Scratch script will control the LEDs connected to an ESP-8266 and Raspberry Pi by monitoring the state of a switch on an Arduino. This script was run in a browser on a PC in off-line mode, allowing the Raspberry Pi to be controlled remotely. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Controlling Or Monitoring One Board With Another"},{"location":"pip_update/","text":"What Is pip? pip is the package installer for Python. You can use pip to install packages from the Python Package Index (aka pypi) and other indexes. pip is the tool used to download and install the s3-extend Python packages from pypi. pip is typically installed when Python is installed. However, that is not the case for Ubuntu 19.04. For the Mac, you may also need to install it separately. For Windows and Raspbian, pip is installed, so you can skip to the next section verifying the pip version. Installing pip3 For Ubuntu 19.04 Make sure your package list is up to date. Open a terminal and enter: sudo apt update Next, install pip3 by entering the following command in your terminal: sudo apt install python3-pip Installing pip3 Mac Refer to this article for instructions. Verifying The pip3 Version To properly install the s3-extend package, the latest version of pip must be used. At the time of this writing, that version is 19.2.3. To check the pip3 version installed on your computer, open a command or terminal window, and type the following: Windows pip --version Mac and Linux (Including Raspberry Pi) pip3 --version Updating pip3 If your pip version is earlier than 19.2.3, here is how to update it to the latest version. Open a command or terminal windows and type the following: Windows python -m pip install --upgrade pip Mac and Linux (Including Raspberry Pi) sudo pip install --upgrade pip Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Verifying/Install pip3"},{"location":"pip_update/#what-is-pip","text":"pip is the package installer for Python. You can use pip to install packages from the Python Package Index (aka pypi) and other indexes. pip is the tool used to download and install the s3-extend Python packages from pypi. pip is typically installed when Python is installed. However, that is not the case for Ubuntu 19.04. For the Mac, you may also need to install it separately. For Windows and Raspbian, pip is installed, so you can skip to the next section verifying the pip version.","title":"What Is pip?"},{"location":"pip_update/#installing-pip3-for-ubuntu-1904","text":"Make sure your package list is up to date. Open a terminal and enter: sudo apt update Next, install pip3 by entering the following command in your terminal: sudo apt install python3-pip","title":"Installing pip3 For Ubuntu 19.04"},{"location":"pip_update/#installing-pip3-mac","text":"Refer to this article for instructions.","title":"Installing pip3 Mac"},{"location":"pip_update/#verifying-the-pip3-version","text":"To properly install the s3-extend package, the latest version of pip must be used. At the time of this writing, that version is 19.2.3. To check the pip3 version installed on your computer, open a command or terminal window, and type the following:","title":"Verifying The pip3 Version"},{"location":"pip_update/#windows","text":"pip --version","title":"Windows"},{"location":"pip_update/#mac-and-linux-including-raspberry-pi","text":"pip3 --version","title":"Mac and Linux (Including Raspberry Pi)"},{"location":"pip_update/#updating-pip3","text":"If your pip version is earlier than 19.2.3, here is how to update it to the latest version. Open a command or terminal windows and type the following:","title":"Updating pip3"},{"location":"pip_update/#windows_1","text":"python -m pip install --upgrade pip","title":"Windows"},{"location":"pip_update/#mac-and-linux-including-raspberry-pi_1","text":"sudo pip install --upgrade pip Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Mac and Linux (Including Raspberry Pi)"},{"location":"python_3_7_install/","text":"Python 3.7 Verification The Scratch 3 OneGPIO extension servers utilize the latest advances in the Python 3.7 asyncio library. Python 3.7 or later is required to run the servers. To check if you have Python 3.7 installed open a command window and type: python3 -V For Windows, you may need to type: python -V The Python version will be displayed: python3 Python 3.7.2 (default, Dec 31 2018, 14:25:33) [GCC 8.2.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> For Windows users, this may look something like: C:\\Users\\Alan>python Python 3.7.2 (tags/v3.7.2:9a3ffc0492, Dec 23 2018, 23:09:28) [MSC v.1916 64 bit (AMD64)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> Installing Python 3.7 Windows Users To install Python 3.7 or later, go to the Python home page, and download the latest 3.7 (or later) distribution for your operating system. If you have Python 2.7 installed, you do not need to remove it. During the installation process, if there is a checkbox to add Python 3.7 to your path, make sure it is checked before proceeding with the installation. Mac Users Go to the python.org download page for Mac and download and install the latest version of Python 3. Raspberry Pi Users The 2019-09-26 release of Raspbian Buster with desktop and recommended software comes with Python 3.7 pre-installed. If you are using an older version of Raspbian, it is easiest to flash the latest version of Rasbian on to an SD card and start anew. Linux Users If Python 3.7 is not included with your distribution, you may install it and have it coexist with the supplied version, using the pyenv utility. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Verify/Install Python 3.7"},{"location":"python_3_7_install/#python-37-verification","text":"The Scratch 3 OneGPIO extension servers utilize the latest advances in the Python 3.7 asyncio library. Python 3.7 or later is required to run the servers. To check if you have Python 3.7 installed open a command window and type: python3 -V For Windows, you may need to type: python -V The Python version will be displayed: python3 Python 3.7.2 (default, Dec 31 2018, 14:25:33) [GCC 8.2.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> For Windows users, this may look something like: C:\\Users\\Alan>python Python 3.7.2 (tags/v3.7.2:9a3ffc0492, Dec 23 2018, 23:09:28) [MSC v.1916 64 bit (AMD64)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>>","title":"Python 3.7 Verification"},{"location":"python_3_7_install/#installing-python-37","text":"","title":"Installing Python 3.7"},{"location":"python_3_7_install/#windows-users","text":"To install Python 3.7 or later, go to the Python home page, and download the latest 3.7 (or later) distribution for your operating system. If you have Python 2.7 installed, you do not need to remove it. During the installation process, if there is a checkbox to add Python 3.7 to your path, make sure it is checked before proceeding with the installation.","title":"Windows Users"},{"location":"python_3_7_install/#mac-users","text":"Go to the python.org download page for Mac and download and install the latest version of Python 3.","title":"Mac Users"},{"location":"python_3_7_install/#raspberry-pi-users","text":"The 2019-09-26 release of Raspbian Buster with desktop and recommended software comes with Python 3.7 pre-installed. If you are using an older version of Raspbian, it is easiest to flash the latest version of Rasbian on to an SD card and start anew.","title":"Raspberry Pi Users"},{"location":"python_3_7_install/#linux-users","text":"If Python 3.7 is not included with your distribution, you may install it and have it coexist with the supplied version, using the pyenv utility. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Linux Users"},{"location":"rpi/","text":"No Additional Files Are Required For The Raspberry Pi You may skip to the next section. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Raspberry Pi"},{"location":"rpi/#no-additional-files-are-required-for-the-raspberry-pi","text":"You may skip to the next section. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"No Additional Files Are Required For The Raspberry Pi"},{"location":"rpi_blocks/","text":"The Raspberry Pi Blocks The blocks consist of a set of command blocks that are rectangular in shape and reporter blocks rounded in shape. Connecting To A Local Browser Versus A Remote Browser For the Raspberry Pi extension, you can run Scratch 3 on a local browser, or from a browser on your PC. For remote operation, you must specify the Raspberry Pi's WiFi or Ethernet address in the Remote IP Address block. NOTE: It is recommended that if you wish to access a Raspberry Pi using a remote browser, that you install and use the off-line version of the Scratch 3 OneGPIO editor. This is because using the on-line version will most likely result in a security error. Command Blocks Remote IP Address If you wish to control the Raspberry Pi from a browser running on your PC, enter the IP address of the Raspberry Pi into this block. This block should be executed before any of the other Raspberry Pi blocks and executed only once. If you wish to use a local browser running on the Raspberry Pi, do not use the Remote IP block. Write Digital This block allows you to select a pin and set its output to either a one or zero. It has two parameters. The first is a drop-down list of valid PINs. The second parameter is the output value. It also is a drop-down list and contains the values zero and one. Write PWM This block allows you to select a pin and set its PWM output to be a value between 0 and 100%. It has two parameters. The first is a drop-down list of valid PINs. The second parameter allows you to fill in a PWM value. If you use a PWM value of less than zero, it will be set to 0 internally. If you set the value to greater than 100, it will be set to 100. Tone If you connect a Piezo type buzzer to a pin, this block will generate a tone on the pin for the frequency and duration specified. It contains three parameters. The first is a drop-down list of valid PINs. The second allows you to specify the frequency of the tone in Herz. The third parameter specifies the tone duration in milliseconds. If a value greater than 5000 is entered, the value will be set to 5000 internally, limiting the maximum playing time to 5 seconds. Write Servo This block allows you to control the angle of a servo motor. It contains two parameters. The first is a drop-down list of valid PINs. The second specifies the angle in degrees. The value is limited to be between 0 and 180. Reporter Blocks Read Digital This block allows you to read the current state of a digital input pin. It has one parameter, a drop-down list containing all the valid PINs. It reports a value of zero or one. Read Sonar This block allows you to connect an HC-SR04 type device. It has two parameters, both containing a drop-down list of valid PINs. The first parameter allows you to select a trigger pin and the second an echo pin. It returns the measured distance in centimeters. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Raspberry Pi"},{"location":"rpi_blocks/#the-raspberry-pi-blocks","text":"The blocks consist of a set of command blocks that are rectangular in shape and reporter blocks rounded in shape.","title":"The Raspberry Pi Blocks"},{"location":"rpi_blocks/#connecting-to-a-local-browser-versus-a-remote-browser","text":"For the Raspberry Pi extension, you can run Scratch 3 on a local browser, or from a browser on your PC. For remote operation, you must specify the Raspberry Pi's WiFi or Ethernet address in the Remote IP Address block. NOTE: It is recommended that if you wish to access a Raspberry Pi using a remote browser, that you install and use the off-line version of the Scratch 3 OneGPIO editor. This is because using the on-line version will most likely result in a security error.","title":"Connecting To A Local Browser Versus A Remote Browser"},{"location":"rpi_blocks/#command-blocks","text":"","title":"Command Blocks"},{"location":"rpi_blocks/#remote-ip-address","text":"If you wish to control the Raspberry Pi from a browser running on your PC, enter the IP address of the Raspberry Pi into this block. This block should be executed before any of the other Raspberry Pi blocks and executed only once. If you wish to use a local browser running on the Raspberry Pi, do not use the Remote IP block.","title":"Remote IP Address"},{"location":"rpi_blocks/#write-digital","text":"This block allows you to select a pin and set its output to either a one or zero. It has two parameters. The first is a drop-down list of valid PINs. The second parameter is the output value. It also is a drop-down list and contains the values zero and one.","title":"Write Digital"},{"location":"rpi_blocks/#write-pwm","text":"This block allows you to select a pin and set its PWM output to be a value between 0 and 100%. It has two parameters. The first is a drop-down list of valid PINs. The second parameter allows you to fill in a PWM value. If you use a PWM value of less than zero, it will be set to 0 internally. If you set the value to greater than 100, it will be set to 100.","title":"Write PWM"},{"location":"rpi_blocks/#tone","text":"If you connect a Piezo type buzzer to a pin, this block will generate a tone on the pin for the frequency and duration specified. It contains three parameters. The first is a drop-down list of valid PINs. The second allows you to specify the frequency of the tone in Herz. The third parameter specifies the tone duration in milliseconds. If a value greater than 5000 is entered, the value will be set to 5000 internally, limiting the maximum playing time to 5 seconds.","title":"Tone"},{"location":"rpi_blocks/#write-servo","text":"This block allows you to control the angle of a servo motor. It contains two parameters. The first is a drop-down list of valid PINs. The second specifies the angle in degrees. The value is limited to be between 0 and 180.","title":"Write Servo"},{"location":"rpi_blocks/#reporter-blocks","text":"","title":"Reporter Blocks"},{"location":"rpi_blocks/#read-digital","text":"This block allows you to read the current state of a digital input pin. It has one parameter, a drop-down list containing all the valid PINs. It reports a value of zero or one.","title":"Read Digital"},{"location":"rpi_blocks/#read-sonar","text":"This block allows you to connect an HC-SR04 type device. It has two parameters, both containing a drop-down list of valid PINs. The first parameter allows you to select a trigger pin and the second an echo pin. It returns the measured distance in centimeters. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Read Sonar"},{"location":"s3-extend/","text":"Installing The Python Extension Servers For Windows Open a command window and type: pip install s3-extend For Mac And Linux (including Raspberry Pi) Open a command window and type: sudo pip3 install s3-extend It may take several minutes to download and install the necessary Python packages to support the Arduino, Raspberry Pi, and ESP-8266. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Install s3-extend"},{"location":"s3-extend/#installing-the-python-extension-servers","text":"","title":"Installing The Python Extension Servers"},{"location":"s3-extend/#for-windows","text":"Open a command window and type: pip install s3-extend","title":"For Windows"},{"location":"s3-extend/#for-mac-and-linux-including-raspberry-pi","text":"Open a command window and type: sudo pip3 install s3-extend It may take several minutes to download and install the necessary Python packages to support the Arduino, Raspberry Pi, and ESP-8266. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"For Mac And Linux (including Raspberry Pi)"},{"location":"s3-local/","text":"Launching Scratch 3 Offline First, you need to download the files. Go to the s3onegpio GitHub Repository, gh-pages branch. Click on the green Clone or download button at the upper right. Save the file and then unzip it. This will create a directory called s3onegpio-gh-pages . Using your file explorer tool, look for index.html in the s3onegpio-gh-pages directory and double click on index.html. The Scratch 3 OneGPIO editor should open. To access the OneGPIO extensions, click on the Extension Icon at the lower left of the Scratch 3 Editor Window. Scroll down and select the OneGPIO extension you wish to use. You may then choose additional OneGPIO extensions. Go to the \"Using OneGPIO Extension Blocks\" section for information on block usage. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Starting Scratch3 Offline"},{"location":"s3-local/#launching-scratch-3-offline","text":"First, you need to download the files. Go to the s3onegpio GitHub Repository, gh-pages branch. Click on the green Clone or download button at the upper right. Save the file and then unzip it. This will create a directory called s3onegpio-gh-pages . Using your file explorer tool, look for index.html in the s3onegpio-gh-pages directory and double click on index.html. The Scratch 3 OneGPIO editor should open. To access the OneGPIO extensions, click on the Extension Icon at the lower left of the Scratch 3 Editor Window. Scroll down and select the OneGPIO extension you wish to use. You may then choose additional OneGPIO extensions. Go to the \"Using OneGPIO Extension Blocks\" section for information on block usage. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Launching Scratch 3 Offline"},{"location":"s3-web/","text":"Launching Scratch 3 Online If you have a reliable internet connection and wish to run Scratch 3 OneGPIO online, click this link. To access the OneGPIO extensions, click on the Extension Icon at the lower left of the Scratch 3 Editor Window. Scroll down and select the OneGPIO extension you wish to use. You may then choose additional OneGPIO extensions. Go to the \"Using OneGPIO Extension Blocks\" section for information on block usage. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Starting Scratch3 Online"},{"location":"s3-web/#launching-scratch-3-online","text":"If you have a reliable internet connection and wish to run Scratch 3 OneGPIO online, click this link. To access the OneGPIO extensions, click on the Extension Icon at the lower left of the Scratch 3 Editor Window. Scroll down and select the OneGPIO extension you wish to use. You may then choose additional OneGPIO extensions. Go to the \"Using OneGPIO Extension Blocks\" section for information on block usage. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Launching Scratch 3 Online"},{"location":"translate/","text":"Block Text And Alert Translations When you select a language by clicking on the globe icon in the Scratch editor, if a translation is available for the selected language, the OneGPIO Scratch block text appears in that language. If translation for your selected language is not available, then the text will be in English If your language is not currently supported and you wish to provide a translation, I encourage you to do so. Not only will you be listed as a contributor, but others who are speakers of your language will thank you as well. Providing A Translation To provide a translation, you simply update the translate.txt file, and either generate a GitHub pull request, or if you are unfamiliar with Git and pull requests, submit it as an issue to https://github.com/MrYsLab/s3onegpio/issues. If you submit the translation as an issue, please call the issue: Translation For LANGUAGE BEING ADDED where LANGUAGE BEING ADDED is the name of your language. I will then incorporate your translation into the source code and update the Scratch 3 Editor to contain your translation. Translations.txt The translations.txt file contains the text for all of the blocks and alerts for all of the OneGPIO extensions. Let's look at the Sonar block to understand what needs to be added to the translations.txt file. Here we see the English and Brazilian Portuguese blocks for the Sonar block. Here is the language specification for the block in translation.txt. const FormSonarRead = { 'pt-br': 'Ler Dist\u00e2ncia: Sonar em T[TRIGGER_PIN] E[ECHO_PIN]', 'pt': 'Ler Dist\u00e2ncia: Sonar em T[TRIGGER_PIN] E[ECHO_PIN]', 'en': 'Read SONAR T [TRIGGER_PIN] E [ECHO_PIN]' }; Each language has its own line in the list of translations, and each line begins with the language's identifier. In this case, pt-br for Brazilian Portuguese, pt for Portuguese, and en for English. Any text between square brackets is a place holder for a parameter field in the block. Do not translate the text within the square brackets, and please use them as is, no matter the alphabet being used. All other text should be translated. You are free to use as many words as you need. The parameters (text in square brackets) may be placed anywhere within the translation that makes sense for your language. Alert Translation Alerts do not contain any parameters. The alert for the ESP-8266 is formatted a little differently. // ESP-8266 Alert const FormAlrt = { 'pt-br': { title: \"Aten\u00e7\u00e3o\", text: \"Informe o endere\u00e7o IP da placa ESP-8266 no bloco apropriado\", icon: \"info\", }, 'pt': { title: \"Aten\u00e7\u00e3o\", text: \"Informe o endere\u00e7o IP da placa ESP-8266 no bloco apropriado\", icon: \"info\", }, 'en': { title: \"Reminder\", text: \"Enter the IP Address of the ESP-8266 Into The IP Address Block\", icon: \"info\", } }; For this translation, translate the text in the \"title\" and \"text\" fields, but do not translate the \"icon\" field. Please retain the words title, text, and icon in English. If you have any questions, please feel free to email me at: MisterYsLab@gmail.com Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Contributing Block Translations"},{"location":"translate/#block-text-and-alert-translations","text":"When you select a language by clicking on the globe icon in the Scratch editor, if a translation is available for the selected language, the OneGPIO Scratch block text appears in that language. If translation for your selected language is not available, then the text will be in English If your language is not currently supported and you wish to provide a translation, I encourage you to do so. Not only will you be listed as a contributor, but others who are speakers of your language will thank you as well.","title":"Block Text And Alert Translations"},{"location":"translate/#providing-a-translation","text":"To provide a translation, you simply update the translate.txt file, and either generate a GitHub pull request, or if you are unfamiliar with Git and pull requests, submit it as an issue to https://github.com/MrYsLab/s3onegpio/issues. If you submit the translation as an issue, please call the issue: Translation For LANGUAGE BEING ADDED where LANGUAGE BEING ADDED is the name of your language. I will then incorporate your translation into the source code and update the Scratch 3 Editor to contain your translation.","title":"Providing A Translation"},{"location":"translate/#translationstxt","text":"The translations.txt file contains the text for all of the blocks and alerts for all of the OneGPIO extensions. Let's look at the Sonar block to understand what needs to be added to the translations.txt file. Here we see the English and Brazilian Portuguese blocks for the Sonar block. Here is the language specification for the block in translation.txt. const FormSonarRead = { 'pt-br': 'Ler Dist\u00e2ncia: Sonar em T[TRIGGER_PIN] E[ECHO_PIN]', 'pt': 'Ler Dist\u00e2ncia: Sonar em T[TRIGGER_PIN] E[ECHO_PIN]', 'en': 'Read SONAR T [TRIGGER_PIN] E [ECHO_PIN]' }; Each language has its own line in the list of translations, and each line begins with the language's identifier. In this case, pt-br for Brazilian Portuguese, pt for Portuguese, and en for English. Any text between square brackets is a place holder for a parameter field in the block. Do not translate the text within the square brackets, and please use them as is, no matter the alphabet being used. All other text should be translated. You are free to use as many words as you need. The parameters (text in square brackets) may be placed anywhere within the translation that makes sense for your language.","title":"Translations.txt"},{"location":"translate/#alert-translation","text":"Alerts do not contain any parameters. The alert for the ESP-8266 is formatted a little differently. // ESP-8266 Alert const FormAlrt = { 'pt-br': { title: \"Aten\u00e7\u00e3o\", text: \"Informe o endere\u00e7o IP da placa ESP-8266 no bloco apropriado\", icon: \"info\", }, 'pt': { title: \"Aten\u00e7\u00e3o\", text: \"Informe o endere\u00e7o IP da placa ESP-8266 no bloco apropriado\", icon: \"info\", }, 'en': { title: \"Reminder\", text: \"Enter the IP Address of the ESP-8266 Into The IP Address Block\", icon: \"info\", } }; For this translation, translate the text in the \"title\" and \"text\" fields, but do not translate the \"icon\" field. Please retain the words title, text, and icon in English. If you have any questions, please feel free to email me at: MisterYsLab@gmail.com Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Alert Translation"},{"location":"under_the_hood/","text":"Scratch 3 OneGPIO Software Components The Scratch 3 OneGPIO extensions consist of two major components. The Modified Scratch 3 Editor The first of the major components is the modified Scratch 3 editor. The modified editor uses all of the code provided by the Scratch 3 team but adds the additional code to create the custom Scratch blocks to support the OneGPIO extensions. This is depicted as the terminal on the left side of the illustration above. If you would like additional information about how the OneGPIO extensions were created and added to the Scratch 3 editor, please refer to the Bots In Pieces blog. The OneGPIO Extension Servers The second major component for each of the OneGPIO extensions is the Extension Server, depicted in the center of the illustration. Each board type has its own Extension Server. An extension server is built as a Python Banyan Framework application that implements the OneGPIO messaging protocol. This is all done transparently, to assure excellent performance and to simplify the design and implementation. Each server utilizes three Python Banyan components. The first is the Backplane, a shared message distributor used by all of the extension servers. Each Extension Server has its own WebSocket Gateway that communicates with the Scratch 3 editor running in the browser. A unique IP port number is assigned to each WebSocket Gateway. Finally, each Extension Server has its own unique Hardware Gateway to translate the platform-independent OneGPIO control and report messages to hardware-specific messages. The transport mechanism used between the Hardware Gateway and its associated micro-controller varies, depending upon the micro-controller in use. For example, the Arduino uses a hardwired, USB-Serial interface is used. The Raspberry Pi and ESP-8266, use a WiFi connection. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"The OneGPIO Gateways and Launchers"},{"location":"under_the_hood/#scratch-3-onegpio-software-components","text":"The Scratch 3 OneGPIO extensions consist of two major components.","title":"Scratch 3 OneGPIO Software Components"},{"location":"under_the_hood/#the-modified-scratch-3-editor","text":"The first of the major components is the modified Scratch 3 editor. The modified editor uses all of the code provided by the Scratch 3 team but adds the additional code to create the custom Scratch blocks to support the OneGPIO extensions. This is depicted as the terminal on the left side of the illustration above. If you would like additional information about how the OneGPIO extensions were created and added to the Scratch 3 editor, please refer to the Bots In Pieces blog.","title":"The Modified Scratch 3 Editor"},{"location":"under_the_hood/#the-onegpio-extension-servers","text":"The second major component for each of the OneGPIO extensions is the Extension Server, depicted in the center of the illustration. Each board type has its own Extension Server. An extension server is built as a Python Banyan Framework application that implements the OneGPIO messaging protocol. This is all done transparently, to assure excellent performance and to simplify the design and implementation. Each server utilizes three Python Banyan components. The first is the Backplane, a shared message distributor used by all of the extension servers. Each Extension Server has its own WebSocket Gateway that communicates with the Scratch 3 editor running in the browser. A unique IP port number is assigned to each WebSocket Gateway. Finally, each Extension Server has its own unique Hardware Gateway to translate the platform-independent OneGPIO control and report messages to hardware-specific messages. The transport mechanism used between the Hardware Gateway and its associated micro-controller varies, depending upon the micro-controller in use. For example, the Arduino uses a hardwired, USB-Serial interface is used. The Raspberry Pi and ESP-8266, use a WiFi connection. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"The OneGPIO Extension Servers"},{"location":"usage/","text":"An Overview Of Using The OneGPIO Extensions Now that all the necessary software is installed both on your computer and your physical computing device, it is time to try things out. Here is a brief recommended procedure for using Scratch 3 with your physical computing projects: Step 1: With the power disconnected from your micro-controller, attach the sensors and actuators to the micro-controller. Never add or remove sensors or actuators with power applied - you may permanently damage your micro-controller. Step 2: Apply power to the micro-controller. Step 3: Start the OneGPIO server code by opening a terminal window for each microcontroller you wish to use and then enter the command for the specific micro-controller: s3a - for the Arduino s3e - for the ESP-8266 s3r - for the Raspberry Pi You should see two additional terminal windows appear on your computer's screen for each micro-controller you are using. Note: You may run a single micro-controller or all three simultaneously, but only one instance of a micro-controller at a time. For example, you may run a Raspberry Pi and an Arduino, and use one to control the other, but you cannot run two of the same type of controller. Step 4: Start Scratch 3 and create and run your Scratch scripts. If you are using the ESP-8266 Extension, when Scratch is connected to the ESP-8266, the red LED on the ESP-8266 NodeMCU is extinguished, indicating a successful connection. Step 5: To power down, dismiss the OneGPIO server by going to the window opened in step 3 and pressing Control-C. You may need to do this twice. For some operating systems, you may also need to enter Control-C in the two windows automatically opened in step 3. Remove power from the micro-controller, and finally dismiss the Web Browser tab running Scratch 3. There is more detail about these steps in the following sections. Please read those sections before proceeding. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"How To Use The OneGPIO Extensions"},{"location":"usage/#an-overview-of-using-the-onegpio-extensions","text":"Now that all the necessary software is installed both on your computer and your physical computing device, it is time to try things out. Here is a brief recommended procedure for using Scratch 3 with your physical computing projects: Step 1: With the power disconnected from your micro-controller, attach the sensors and actuators to the micro-controller. Never add or remove sensors or actuators with power applied - you may permanently damage your micro-controller. Step 2: Apply power to the micro-controller. Step 3: Start the OneGPIO server code by opening a terminal window for each microcontroller you wish to use and then enter the command for the specific micro-controller: s3a - for the Arduino s3e - for the ESP-8266 s3r - for the Raspberry Pi You should see two additional terminal windows appear on your computer's screen for each micro-controller you are using. Note: You may run a single micro-controller or all three simultaneously, but only one instance of a micro-controller at a time. For example, you may run a Raspberry Pi and an Arduino, and use one to control the other, but you cannot run two of the same type of controller. Step 4: Start Scratch 3 and create and run your Scratch scripts. If you are using the ESP-8266 Extension, when Scratch is connected to the ESP-8266, the red LED on the ESP-8266 NodeMCU is extinguished, indicating a successful connection. Step 5: To power down, dismiss the OneGPIO server by going to the window opened in step 3 and pressing Control-C. You may need to do this twice. For some operating systems, you may also need to enter Control-C in the two windows automatically opened in step 3. Remove power from the micro-controller, and finally dismiss the Web Browser tab running Scratch 3. There is more detail about these steps in the following sections. Please read those sections before proceeding. Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"An Overview Of Using The OneGPIO Extensions"},{"location":"xterm/","text":"Installing xterm For Mac and Linux (including Raspberry Pi) The OneGPIO Extension launchers open a terminal window for each Banyan component launched. Because there is no standard terminal for Linux and for consistency when using a Mac, xterm will be used and needs to be installed. Windows Installation The xterm package is not required for Windows so you may skip to the next step. Mac Installation For the Mac, install XQuartz as described here. For Linux and Raspberry Pi Open a terminal window and type the following: sudo apt-get install xterm Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"Installing xterm"},{"location":"xterm/#installing-xterm-for-mac-and-linux-including-raspberry-pi","text":"The OneGPIO Extension launchers open a terminal window for each Banyan component launched. Because there is no standard terminal for Linux and for consistency when using a Mac, xterm will be used and needs to be installed.","title":"Installing xterm For Mac and Linux (including Raspberry Pi)"},{"location":"xterm/#windows-installation","text":"The xterm package is not required for Windows so you may skip to the next step.","title":"Windows Installation"},{"location":"xterm/#mac-installation","text":"For the Mac, install XQuartz as described here.","title":"Mac Installation"},{"location":"xterm/#for-linux-and-raspberry-pi","text":"Open a terminal window and type the following: sudo apt-get install xterm Copyright (C) 2019 Alan Yorinks All Rights Reserved","title":"For Linux and Raspberry Pi"}]}